// Copyright (c) 2025 Pyarelal Knowles, MIT License
// This file was generated from {{ template_filename }}. Do not edit directly.
{# Ignore that. This is the original! #}
#pragma once

#include <vulkan/vulkan_core.h>
#include <vko/functions.hpp>
#include <vko/exceptions.hpp>
#include <vko/handle.hpp>

namespace vko
{

// TODO: these won't work on 32-bit platforms because Vulkan typedefs them as uint64_t
template<class Handle> struct handle_traits;
## for command in handle_destroy_commands
{% if command.name in platform_commands %}
#if defined({{ join(command.extensions, ") || defined(") }})
{% endif %}
{% set type_enum = find("//types/type[name='" + command.handle + "']/@objtypeenum") %}
template<> struct handle_traits<{{ command.handle }}> {
    using destroy_first_param = {{ command.first_param }};
    using destroy_t = PFN_{{ command.name }};
    template<class CommandTable> static destroy_t destroy_command(const CommandTable& t) { return t.{{ command.name }}; }
    static constexpr VkObjectType type_enum = {{ type_enum }};
};
{% if command.name in platform_commands %}
#endif  // defined({{ join(command.extensions, ") || defined(") }})
{% endif %}
## endfor

## for handle in handles
{% if handle.failure %}
// Skipping {{ handle.name }} for {{ handle.create }}: {{ handle.failure }}
{% else if not handle.createInfo %}
// Skipping {{ handle.name }} for {{ handle.create }}: Could not find CreateInfo
{% else %}
    {% if handle.create in platform_commands %}
#if defined({{ join(handle.extensions, ") || defined(") }})
    {% endif %}
    {% if "Vk" + handle.name != handle.parent %}{# Don't generate code for special case VkInstance and VkDevice handles #}
    {% set parent=substr(handle.parent, 2) %}
        {% if handle.create %}
            {% if handle.createPlural %}
// Skipping {{ handle.name }} for {{ handle.create }}: Plurals not implemented yet
            {% else %}
using {{ handle.name }} = Handle<{{ handle.type }}, PFN_{{ handle.create }}>;
template <> struct CreateHandle<{{ handle.type }}, PFN_{{ handle.create }}> {
    using CreateInfo = {{ handle.createInfo }};
    template <{{ lower(parent) }}_commands {{ parent }}Commands>
    {{ handle.type }} operator()(const {{ parent }}Commands& vk, {{ handle.parent }} {{ lower(parent) }}, const {{ handle.createInfo }}& createInfo) {
        {{ handle.type }} handle;
        check(vk.{{ handle.create }}({{ lower(parent) }}, &createInfo, nullptr, &handle));
        return handle;
    }
};
            {% endif %}
        {% else %}
using {{ handle.name }} = Handle<{{ handle.type }}>; {{ handle.createPlural }} {{ handle.failure}} {{ handle.create }}
        {% endif %}
    {% endif %}
    {% if handle.create in platform_commands %}
#endif  // defined({{ join(handle.extensions, ") || defined(") }})
    {% endif %}
{% endif %}
## endfor

}  // namespace vko
