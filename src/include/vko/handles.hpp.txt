// Copyright (c) 2025 Pyarelal Knowles, MIT License
// This file was generated from {{ template_filename }}. Do not edit directly.
{# Ignore that. This is the original! #}
#pragma once

#include <vulkan/vulkan_core.h>
#include <string_view>
#include <vko/functions.hpp>
#include <vko/exceptions.hpp>

namespace vko
{

constexpr std::string_view toString(VkResult result)
{
    switch (result) 
    {
## for result in findall("//enums[@name='VkResult']/enum/@name")
    case {{ result }}: return "{{ result }}";
## endfor
    default: break;
    }
    return "<invalid result>";
}

template <class T, class Owner, class CreateInfo, auto CreateFunc>
T createHandle(const Owner& owner, const CreateInfo& createInfo)
{
    T handle;
    VkResult result = (owner.*CreateFunc)(owner, &createInfo, nullptr, &handle);
    if (result != VK_SUCCESS)
        throw Exception(toString(result));
    return handle;
}

template <class T, class Owner, auto DestroyFunc>
void destroyHandle(const Owner& owner, T handle)
{
    (owner.*DestroyFunc)(owner, handle, nullptr);
}

template <class T, class Owner, class CreateInfo, auto CreateFunc, auto DestroyFunc>
class Handle {
public:
    Handle(const Owner& owner, const CreateInfo& createInfo)
        : m_owner(&owner)
        , m_handle(createHandle<T, Owner, CreateInfo, CreateFunc>(owner, createInfo))
    {
    }
    ~Handle() { destroy(); }
    Handle(const Handle& other) = delete;
    Handle(Handle&& other) noexcept
        : m_owner(other.m_owner),
          m_handle(other.m_handle) {
        other.m_handle = VK_NULL_HANDLE;
    }
    Handle& operator=(const Handle& other) = delete;
    Handle& operator=(Handle&& other) {
        destroy();
        m_owner = other.m_owner;
        m_handle = other.m_handle;
        other.m_handle = VK_NULL_HANDLE;
        return *this;
    }
    operator T() const { return m_handle; }
    explicit operator bool() const { return m_handle != VK_NULL_HANDLE; }

private:
    void destroy() {
        if (m_handle != VK_NULL_HANDLE)
            destroyHandle<T, Owner, DestroyFunc>(*m_owner, m_handle);
    }
    const Owner* m_owner = nullptr;
    T            m_handle = VK_NULL_HANDLE;
};

// Special case VkInstance
template <>
VkInstance createHandle<VkInstance, GlobalCommands, VkInstanceCreateInfo, &GlobalCommands::vkCreateInstance>(const GlobalCommands& owner, const VkInstanceCreateInfo& createInfo)
{
    VkInstance handle;
    VkResult result = owner.vkCreateInstance(&createInfo, nullptr, &handle);
    if (result != VK_SUCCESS)
        throw Exception(toString(result));
    return handle;
}
template <>
void destroyHandle<VkInstance, GlobalCommands, &InstanceCommands::vkDestroyInstance>(const GlobalCommands& owner, VkInstance handle)
{
    // HACK: For whatever reason, vulkan breaks create/destroy symmetry here.
    // The destroy function must be loaded in InstanceCommands, but we don't
    // have access to that here. Instead, we re-load the function. The real fix
    // would be in the vulkan spec.
    auto vkDestroyInstance = reinterpret_cast<PFN_vkDestroyInstance>(owner.vkGetInstanceProcAddr(handle, "vkDestroyInstance"));
    vkDestroyInstance(handle, nullptr);
}
using InstanceHandle = Handle<VkInstance, GlobalCommands, VkInstanceCreateInfo, &GlobalCommands::vkCreateInstance, &InstanceCommands::vkDestroyInstance>;
class Instance : public InstanceHandle, public InstanceCommands {
public:
    Instance(InstanceHandle&& handle, PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr)
        : InstanceHandle(std::move(handle)),
          InstanceCommands(*this, vkGetInstanceProcAddr) {}
};

// Special case VkDevice
template <>
class Handle<VkDevice, Instance, VkDeviceCreateInfo, &InstanceCommands::vkCreateDevice, &DeviceCommands::vkDestroyDevice> {
public:
    Handle(const Instance& owner, VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo& createInfo)
        : m_owner(&owner)
    {
        VkResult result = owner.vkCreateDevice(physicalDevice, &createInfo, nullptr, &m_handle);
        if (result != VK_SUCCESS)
            throw Exception(toString(result));
        m_vkDestroyDevice = reinterpret_cast<PFN_vkDestroyDevice>(owner.vkGetDeviceProcAddr(m_handle, "vkDestroyDevice"));
    }
    ~Handle() { destroy(); }
    Handle(const Handle& other) = delete;
    Handle(Handle&& other) noexcept
        : m_owner(other.m_owner),
          m_vkDestroyDevice(other.m_vkDestroyDevice),
          m_handle(other.m_handle) {
        other.m_handle = VK_NULL_HANDLE;
    }
    Handle& operator=(const Handle& other) = delete;
    Handle& operator=(Handle&& other) {
        destroy();
        m_owner = other.m_owner;
        m_vkDestroyDevice = other.m_vkDestroyDevice;
        m_handle = other.m_handle;
        other.m_handle = VK_NULL_HANDLE;
        return *this;
    }
    operator VkDevice() const { return m_handle; }
    explicit operator bool() const { return m_handle != VK_NULL_HANDLE; }

private:
    void destroy() {
        if (m_handle != VK_NULL_HANDLE)
            m_vkDestroyDevice(m_handle, nullptr);
    }
    const Instance* m_owner = nullptr;
    PFN_vkDestroyDevice m_vkDestroyDevice = nullptr;
    VkDevice            m_handle = VK_NULL_HANDLE;
};
using DeviceHandle = Handle<VkDevice, Instance, VkDeviceCreateInfo, &InstanceCommands::vkCreateDevice, &DeviceCommands::vkDestroyDevice>;
class Device : public DeviceHandle, public DeviceCommands {
public:
    Device(DeviceHandle&& handle, PFN_vkGetDeviceProcAddr vkGetDeviceProcAddr)
        : DeviceHandle(std::move(handle)),
          DeviceCommands(*this, vkGetDeviceProcAddr) {}
};


## for handle in handles
{% if handle.failure %}
// Skipping {{ handle.name }} for {{ handle.create }}: {{ handle.failure }}
{% else %}
{% if handle.extension %}
#if defined({{ handle.extension }})
{% endif %}
{% if "Vk" + handle.name != handle.owner %}
{% set owner=substr(handle.owner, 2) %}
using {{ handle.name }} = Handle<{{ handle.type }}, {{ owner }}, {{ handle.createInfo }}, &{{ owner }}Commands::{{ handle.create }}, &{{ owner }}Commands::{{ handle.destroy }}>;
{% endif %}
{% if handle.extension %}
#endif  // defined({{ handle.extension }})
{% endif %}
{% endif %}
## endfor

}  // namespace vko
